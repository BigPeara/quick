<import name="loading" src="../../Components/loading/index"></import>
<template>
    <div class="login">
        <div class="login-box">
            <!-- 手机快速登录 -->
            <div class="phone-login" if="isPhone == true">
                <div>
                    <text class="phone-title">手机登录</text>
                </div>
                <div class="phone-detail phone-input">
                    <text class="phone-num">手机号:</text>
                    <input type="number" placeholder="请输入手机号" class="ws-input num-input" onchange="setMob">
                    <div class="btn-send" onclick="sendCode">
                        <text style="color:{{validate()?'#cbcbcb':'#f76c5b' }}">{{showText}}</text>
                    </div>
                </div>
                <div class="phone-detail">
                    <text class="phone-num">验证码:</text>
                    <input type="number" placeholder="请输入验证码" onchange="setCode" class="ws-input">
                </div>
                <!-- 登录按钮 -->
                <div class="login-choose">
                    <div class="btn-login" onclick="mobileLogin" style="background-color: {{mob.length==11&&verificationCode.length==4?'#f76c5b':'#ffb1a8'}}">
                        <text class="login-text" onclick="mobileLogin">登录</text>
                    </div>
                    <div>
                        <text class="change-login" onclick="checkType">账号密码登录</text>
                    </div>
                </div>
            </div>
            <!-- 账号密码登录 -->
            <div class="phone-login" if="isPhone == false">
                <div class="num-login">
                    <div>
                        <text class="phone-title">账号登录</text>
                    </div>
                    <div class="phone-detail">
                        <text class="phone-num">账号:</text>
                        <input type="email" placeholder="手机号/账号" onchange="setAccount" class="ws-input">
                    </div>
                    <div class="phone-detail">
                        <text class="phone-num">密码:</text>
                        <input type="password" placeholder="6-18位密码" onchange="setPwd" class="ws-input">
                    </div>
                </div>
                <!-- 登录按钮 -->
                <div class="login-choose">
                    <div class="btn-login" onclick="userLogin" style="background-color: {{isAccountLogin()?'#f76c5b':'#ffb1a8'}}">
                        <text class="login-text" onclick="userLogin">登录</text>
                    </div>
                    <div>
                        <text class="change-login" onclick="checkType">手机快速登录</text>
                    </div>
                </div>
            </div>
        </div>

        <loading option="{{option}}"></loading>
    </div>
</template>
<script>
    import api from '../../api/personData';
    import authentication from '../../utils/authentication';
    import ReadingConfig from "../../utils/readingConfig";
    import bookcaseService from '../../api/bookcaseService';
    import router from '@system.router'
    import prompt from '@system.prompt'
    export default {
        data: {
            showText: "获取验证码",
            mob: '',
            verificationCode: '',
            account: '',
            pwd: '',
            isPhone: true,
            timer: null,
            isSend: false,
            option: {
                show: false,
                text: '正在登录中...'
            }
        },
        onInit() {
            clearInterval(this.timer);
        },
        onDestroy() {
            clearInterval(this.timer);
        },
        validate() {
            return this.isSend || !(/^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\d{8}$/.test(this.mob));
        },
        isLogin() {
            return !this.validate() && this.verificationCode.length == 4;
        },
        isAccountLogin() {
            return this.account.length >= 5 && this.pwd.length >= 5
        },
        sendCode() { //发送验证码
            if (!this.validate()) {
                this.showText = "发送中..."
                api.sendSmsAuthCode({ mob: this.mob, pType: '4' }).then(res => {
                    this.isSend = true;
                    this.showText = "已发送";
                    setTimeout(() => {
                        let num = 60
                        this.timer = setInterval((res => {
                            if (num == 0) {
                                this.showText = '重新获取';
                                this.isSend = false;
                                clearInterval(this.timer);
                                return;
                            }
                            num--;
                            this.showText = num + 's'
                        }), 1000)
                    }, 300)
                }, error => {
                    this.isSend = false;
                    this.showText = "重新获取";
                })
            }
        },
        setMob(val) {
            this.mob = val.text
        },
        setCode(val) {
            this.verificationCode = val.text
        },
        setAccount(val) {
            this.account = val.text;
        },
        setPwd(val) {
            this.pwd = val.text;
        },
        checkType() {
            this.isPhone = !this.isPhone;
        },
        mobileLogin() {  //手机登录
            let that = this;
            if (this.mob.length==11&&this.verificationCode.length==4) {
                this.option.show = true;
                api.mobileLogin({ mob: this.mob, mobKey: this.verificationCode }).then(res1 => {
                    Promise.all([authentication.setToken(res1.Token), authentication.setUserData(res1.data)]).then(res2 => {
                        api.bookInit({ pageIndex: 1, pageSize: 100 }).then(res3 => {
                            let lists = res3.data.items;
                            this.option.show = false;
                            bookcaseService.initBookCase(lists).then(res4 => {
                                prompt.showToast({
                                    message: "登录成功！",
                                    duration: 0
                                })
                                ReadingConfig.getRoute().then(res => {
                                    if (res == '' || res == undefined) {
                                        router.replace({
                                            uri: 'Index',
                                            params: {
                                                currentIndex: 2
                                            }
                                        })
                                    } else {
                                        router.replace({
                                            uri: JSON.parse(res).uri,
                                            params: JSON.parse(res).params || {}
                                        })
                                    }
                                })
                            })
                        }).catch(res => {
                            this.option.show = false;
                        })
                    })
                }).catch(res => {
                    this.option.show = false;
                })
            }
        },
        userLogin() {
            let that = this;
            if (this.isAccountLogin()) {
                this.option.show = true;
                api.userLogin({ account: this.account, pwd: this.pwd }).then(res1 => {
                    Promise.all([authentication.setToken(res1.Token), authentication.setUserData(res1.data)]).then(res2 => {
                        api.bookInit({ pageIndex: 1, pageSize: 100 }).then(res3 => {
                            this.option.show = false;
                            let lists = res3.data.items
                            let arr = []
                            for (let i in lists) {
                                arr.push({
                                    bid: lists[i].id,
                                    isBookCase: true
                                })
                            }
                            bookcaseService.initBookCase(arr).then(res4 => {
                                prompt.showToast({
                                    message: "登录成功！",
                                    duration: 0
                                })
                                ReadingConfig.getRoute().then(res => {
                                    if (res == '' || res == undefined) {
                                        router.replace({
                                            uri: 'Index',
                                            params: {
                                                currentIndex: 2
                                            }
                                        })
                                    } else {
                                        router.replace({
                                            uri: JSON.parse(res).uri,
                                            params: JSON.parse(res).params || {}
                                        })
                                    }
                                })
                            })
                        }).catch(res => {
                            this.option.show = false;
                        })
                    })
                }).catch(res => {
                    this.option.show = false;
                })
            }
        },
        setLoginState(token, data) {
            let that = this
            return new Promise((resolve, reject) => {
                Promise.all([that.setToken(token), that.setUserData(data)]).then(res => {
                    resolve("ok")
                })
            })
        },
        setToken(token) {
            return new Promise((resolve, reject) => {
                authentication.setToken(Token).then(res => {
                    resolve("成功")
                }, error => {
                    reject("token保存失败")
                })
            })
        },
        setUserData(data) {
            return new Promise((resolve, reject) => {
                authentication.setUserData(data).then(res => {
                    resolve("成功")
                }, error => {
                    reject("用户数据保存失败")
                })
            })
        }
    }
</script>
<style>
    .login {
        padding: 0 30px;
        flex-direction: column;
        background-color: #ffffff;
    }

    .login-box {
        flex-direction: column;
    }

    .phone-login {
        flex: 1;
        flex-direction: column;
    }

    .phone-input {
        justify-content: space-between;

    }

    .phone-detail {
        padding: 20px 0;
        border-bottom-width: 1px;
        border-color: #e5e5e5;
        margin: 20px 0;
    }

    .num-input {
        flex: 1;
    }

    .phone-title {
        padding: 30px 0;
        width: 100%;
        text-align: center;
        font-size: 32px;
        color: #333333;
        font-weight: bold;
    }

    .num-login {
        flex: 1;
        flex-direction: column;
    }

    .phone-num {
        font-size: 30px;
        color: #333333;
    }

    .btn-send {
        font-size: 30px;
        color: #cbcbcb;
        padding-left: 15px;
        border-left-width: 1px;
        border-color: #cbcbcb;
        height: 50px;
        width: 180px;
        justify-content: center;
    }

    .btn-login {
        width: 100%;
        height: 74px;
        border-radius: 10px;

        justify-content: center;
        align-items: center;
        /* background-color: #f76c5b; */
    }

    .login-text {
        font-size: 28px;
        color: #ffffff;
    }

    .ws-input {
        font-size: 30px;
        padding-left: 20px;
        flex: 1;
    }

    .login-choose {
        flex-direction: column;
    }

    .change-login {
        width: 100%;
        text-align: center;
        margin-top: 20px;
        color: #333333;
    }
</style>